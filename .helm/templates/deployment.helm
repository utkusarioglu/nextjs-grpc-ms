apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ms.fullname" . }}
  labels:
    {{- include "ms.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "ms.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "ms.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ms.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: grpc
              containerPort: 50051
              protocol: TCP
            - name: http
              containerPort: 80
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            {{- range $k, $v := .Values.env }}
            - name: {{ $k | quote }}
              value: {{ $v | quote }}
            {{- end }}
            - name: IS_LOCAL
              value: {{ .Values.cloudProvider.isLocal | quote }}
            - name: IS_AWS
              value: {{ .Values.cloudProvider.isAws | quote}}
          volumeMounts:
            {{ with .Values.env }}
            {{- if eq .RUN_MODE "development" -}}
            - name: source-code
              mountPath: {{ .PROJECT_ROOT_ABSPATH | quote }}
            {{- end }}
            - name: {{ $.Values.certSecretNames.msGrpcServer | quote }}
              mountPath: {{
                include "ms.singleCertPath" ( 
                  dict 
                    "global" $
                    "subpath" .GRPC_SERVER_CERT_SUBPATH
                ) | quote
              }}
              readOnly: true
            # - name: "vault-api-tls-client-ca"
            #   mountPath: "/vault/tls"
            #   readOnly: true
            {{- end -}}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        {{ if eq .Values.env.RUN_MODE "development" -}}
        - name: source-code
          persistentVolumeClaim:
            claimName: source-code-ms-pvc
        {{ end -}}
        - name: {{ .Values.certSecretNames.msGrpcServer | quote }}
          secret:
            secretName: {{ .Values.certSecretNames.msGrpcServer | quote }}
        # - name: "vault-api-tls-client-ca"
        #   secret:
        #     secretName: "vault-api-tls-client-ca"
        #     optional: false
        #     items:
        #       - key: tls.crt
        #         path: tls.crt
        
